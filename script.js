class CircularTimeline{constructor(){this.currentIndex=0;
this.totalItems=7;
this.rotationAngle=0;
this.isAutoRotating=false;
this.rotationInterval=null;
this.totalProgress=0;
this.timelineData=[{title:'First Code in Python',description:'Began programming in Python during high school, sparking my interest in computer science.',year:'2017-2018'},{title:'Java and APCS',description:'Advanced my skills through AP Computer Science, gaining strong foundations in Java and software principles.',year:'2018-2020'},{title:'B.S. in Computer Science',description:'Completed my undergraduate degree, building expertise across algorithms, systems, and AI coursework.',year:'2020-2024'},{title:'TA&SWE Intern',description:'Worked as a teaching assistant and intern, mentoring peers while contributing to software projects.',year:'Jan-May 2023'},{title:'SWE Intern â†’ AI Engineer',description:'Transitioned from software engineering to AI engineering, focusing on applied machine learning solutions.',year:'2024-2025'},{title:'M.S. in Computer Science',description:'Pursuing a master\'s degree with a concentration in machine learning and computer vision.',year:'2024-2025'},{title:'AI/ML Engineering Intern',description:'Applying advanced AI and ML techniques to real-world problems in a professional setting.',year:'2025-Present'}];
this.init();
}init(){this.bindEvents();
this.updateDisplay();
this.updateProgress();
this.startAutoRotation();
}bindEvents(){document.getElementById('prevBtn').addEventListener('click',()=>{this.previous();
this.restartRotation();
});
document.getElementById('nextBtn').addEventListener('click',()=>{this.next();
this.restartRotation();
});
document.addEventListener('keydown',(e)=>{if(e.target.tagName==='INPUT'||e.target.tagName==='TEXTAREA'){return;
}if(e.key==='ArrowLeft')this.previous();
if(e.key==='ArrowRight')this.next();
if(e.key===' '){e.preventDefault();
this.toggleAutoRotation();
}});
}next(){this.currentIndex=(this.currentIndex+1)%this.totalItems;
this.totalProgress+=1;
this.updateRotation();
}previous(){this.currentIndex=(this.currentIndex-1+this.totalItems)%this.totalItems;
this.totalProgress-=1;
this.updateRotation();
}goToItem(index){this.currentIndex=index;
this.updateRotation();
}updateRotation(){this.updateActiveStates();
this.updateDisplay();
this.updateProgress();
}updateActiveStates(){}updateDisplay(){const currentData=this.timelineData[this.currentIndex];
document.getElementById('centerTitle').textContent=currentData.title;
document.getElementById('centerDescription').textContent=currentData.description;
document.getElementById('centerYear').textContent=currentData.year;
}updateProgress(){const progress=(this.totalProgress/this.totalItems)*100;
const circumference=2*Math.PI*45;
const offset=circumference-(progress/100)*circumference;
const progressFill=document.querySelector('.progress-fill');
progressFill.style.strokeDashoffset=offset;
}toggleAutoRotation(){if(this.isAutoRotating){this.stopAutoRotation();
}else{this.startAutoRotation();
}}startAutoRotation(){this.isAutoRotating=true;
this.rotationInterval=setInterval(()=>{this.next();
},10000);
}stopAutoRotation(){this.isAutoRotating=false;
if(this.rotationInterval){clearInterval(this.rotationInterval);
this.rotationInterval=null;
}}restartRotation(){this.stopAutoRotation();
this.startAutoRotation();
}}function animateSkillsChart(){const radarSection=document.querySelector('#skills');
const skillPoints=document.querySelectorAll('.skill-point');
const skillArea=document.querySelector('.skill-area');
function calculatePosition(value,angle){const centerX=200;
const centerY=200;
const maxRadius=120;
const radius=(value/100)*maxRadius;
const x=centerX+radius*Math.cos(angle*Math.PI/180);
const y=centerY+radius*Math.sin(angle*Math.PI/180);
return{x,y};
}const skillData=[{name:'Python',value:100},{name:'Java',value:95},{name:'C Family',value:90},{name:'SQL',value:90},{name:'HTML',value:85},{name:'R',value:75},{name:'Matlab',value:75},{name:'Scala',value:60}];
function shuffleArray(array){const shuffled=[...array];
for(let i=shuffled.length-1;
i>0;
i--){const j=Math.floor(Math.random()*(i+1));
[shuffled[i],shuffled[j]]=[shuffled[j],shuffled[i]];
}return shuffled;
}const angles=[-90,-45,0,45,90,135,180,-135];
const shuffledSkills=shuffleArray(skillData);
const skills=shuffledSkills.map((skill,index)=>({...skill,angle:angles[index]}));
skills.forEach((skill,index)=>{const point=skillPoints[index];
const position=calculatePosition(skill.value,skill.angle);
point.setAttribute('cx',position.x);
point.setAttribute('cy',position.y);
point.setAttribute('data-value',skill.value);
point.setAttribute('data-skill',skill.name);
});
const chartLabels=document.querySelectorAll('.chart-label');
skills.forEach((skill,index)=>{const label=chartLabels[index];
if(label){const position=calculatePosition(skill.value,skill.angle);
const labelRadius=140;
const labelX=200+labelRadius*Math.cos(skill.angle*Math.PI/180);
const labelY=200+labelRadius*Math.sin(skill.angle*Math.PI/180);
label.setAttribute('x',labelX);
label.setAttribute('y',labelY);
label.setAttribute('data-skill',skill.name);
label.textContent=skill.name;
}});
const polygonPoints=skills.map(skill=>{const position=calculatePosition(skill.value,skill.angle);
return `${position.x},${position.y}`;
}).join(' ');
skillArea.setAttribute('points',polygonPoints);
const observer=new IntersectionObserver((entries)=>{entries.forEach(entry=>{if(entry.isIntersecting){skillPoints.forEach((point,index)=>{setTimeout(()=>{point.classList.add('animate');
},index*200);
});
const chartLabels=document.querySelectorAll('.chart-label');
chartLabels.forEach((label,index)=>{setTimeout(()=>{label.classList.add('animate');
},index*200+500);
});
setTimeout(()=>{skillArea.classList.add('animate');
},1000);
}});
},{threshold:0.3});
observer.observe(radarSection);
}const skillDetails={'Python':{years:'8+years',level:'Expert',description:'Extensive experience in Python for data science, machine learning, web development, and automation. Proficient with libraries like NumPy, Pandas, Scikit-learn, TensorFlow, and Django.'},'Java':{years:'7+years',level:'Advanced',description:'Strong foundation in Java programming with experience in object-oriented design, Spring Framework, and enterprise application development. Used extensively in academic projects and internships.'},'C Family':{years:'5+years',level:'Advanced',description:'Solid understanding of C and C++ for systems programming, algorithms, and performance-critical applications. Experience with memory management, data structures, and competitive programming.'},'SQL':{years:'4+years',level:'Advanced',description:'Proficient in SQL for database design, query optimization, and data analysis. Experience with PostgreSQL, MySQL, and SQLite. Skilled in complex queries, joins, and database administration.'},'HTML':{years:'6+years',level:'Advanced',description:'Strong foundation in HTML5, semantic markup, and web standards. Experience with responsive design, accessibility, and modern web development practices. Used in various web projects and portfolios.'},'R':{years:'2+years',level:'Intermediate',description:'Experience with R for statistical analysis, data visualization, and research projects. Familiar with tidyverse, ggplot2, and statistical modeling packages. Used in academic research and data analysis projects.'},'Matlab':{years:'2+years',level:'Intermediate',description:'Proficiency in MATLAB for numerical computing, signal processing, and engineering simulations. Experience with Simulink, image processing, and mathematical modeling. Used in academic coursework and research.'},'Scala':{years:'1+year',level:'Intermediate',description:'Growing experience with Scala for functional programming and big data processing. Familiar with Spark, Akka, and Scala collections. Learning through personal projects and data engineering applications.'}};
function initializeSkillModal(){const modal=document.getElementById('skillModal');
const closeBtn=document.querySelector('.close-modal');
const skillItems=document.querySelectorAll('.skill-item');
const chartLabels=document.querySelectorAll('.chart-label');
function showModal(skillName){const skillData=skillDetails[skillName];
if(skillData){document.getElementById('modalSkillName').textContent=skillName;
document.getElementById('modalYears').textContent=skillData.years;
document.getElementById('modalLevel').textContent=skillData.level;
document.getElementById('modalDescription').textContent=skillData.description;
modal.style.display='block';
}}function hideModal(){modal.style.display='none';
}skillItems.forEach(item=>{item.addEventListener('click',()=>{const skillName=item.getAttribute('data-skill');
showModal(skillName);
});
});
chartLabels.forEach(label=>{label.addEventListener('click',()=>{const skillName=label.getAttribute('data-skill');
showModal(skillName);
});
});
const skillPoints=document.querySelectorAll('.skill-point');
skillPoints.forEach(point=>{point.addEventListener('click',()=>{const skillName=point.getAttribute('data-skill');
showModal(skillName);
});
});
closeBtn.addEventListener('click',()=>{hideModal();
if(window.restartCarousel){window.restartCarousel();
}});
modal.addEventListener('click',(e)=>{if(e.target===modal){hideModal();
if(window.restartCarousel){window.restartCarousel();
}}});
document.addEventListener('keydown',(e)=>{if(e.key==='Escape'&&modal.style.display==='block'){hideModal();
if(window.restartCarousel){window.restartCarousel();
}}});
}const techDetails={'Python':{usage:'Project-Specific Implementation',role:'Multi-Project Development',description:'Python implementation varies by project context. Click on Python tags in different projects to see specific usage details.'},'Open3D':{usage:'3D Point Cloud Processing',role:'Computer Vision&3D Reconstruction',description:'Leveraged Open3D for point cloud manipulation, alignment, and visualization. Used for processing multi-sensor data and creating 3D reconstructions from RGB, depth, and LiDAR streams.'},'CARLA':{usage:'Autonomous Vehicle Simulation',role:'Simulation Environment&Data Collection',description:'Used CARLA simulator for capturing realistic sensor data including RGB cameras, depth sensors, and LiDAR. Enabled safe testing and data collection for autonomous vehicle research.'},'OpenCV':{usage:'Computer Vision&Image Processing',role:'Image Analysis&Feature Detection',description:'Applied OpenCV for image processing, feature detection, and computer vision tasks. Used for ORB feature matching, HSV color segmentation, and image stitching in vision systems.'},'PyGame':{usage:'Game Development&Visualization',role:'Interactive Graphics&User Interface',description:'Utilized PyGame for creating interactive visualizations and game interfaces. Used for rendering 3D models, handling user input, and displaying real-time graphics.'},'C#':{usage:'Game Development&OOP',role:'Object-Oriented Programming',description:'Implemented C# for game development using object-oriented principles. Created custom data structures, algorithms, and interactive GUI components for turn-based strategy games.'},'Godot Mono':{usage:'Game Engine&Development',role:'Game Engine Integration',description:'Used Godot Mono for game engine integration and development. Leveraged the engine\'s built-in systems for graphics rendering, physics simulation, and scene management.'},'Gimp':{usage:'Graphics Design&Image Editing',role:'Visual Asset Creation',description:'Applied Gimp for creating and editing visual assets including map graphics, textures, and UI elements. Used for designing collision systems and visual components for games.'},'Discord.py':{usage:'Discord Bot Development',role:'API Integration&Bot Framework',description:'Used Discord.py framework for creating interactive Discord bots. Implemented command handling, event processing, and real-time communication with Discord\'s API.'},'Lichess API':{usage:'Chess Data Integration',role:'External API Integration',description:'Integrated with Lichess API to fetch player statistics, ratings, and game data. Used for displaying real-time chess information and enabling player challenges.'},'Socket Programming':{usage:'Network Communication',role:'Inter-Process Communication',description:'Implemented TCP socket programming for network communication between distributed nodes. Used for exchanging routing updates and maintaining network topology information.'},'Algorithms':{usage:'Routing Protocol Implementation',role:'Network Algorithm Development',description:'Developed and implemented routing algorithms including Distance Vector Routing (DVR) and Link State Routing (LSR). Used Bellman-Ford and Dijkstra algorithms for optimal path computation.'},'Concurrency':{usage:'Multi-threaded Programming',role:'Parallel Processing&Threading',description:'Applied concurrent programming techniques for handling multiple network nodes simultaneously. Used threading for parallel processing and real-time network simulation.'},'TensorFlow':{usage:'Deep Learning Model Training',role:'ML Model Development',description:'Leveraged TensorFlow for building and training deep learning models. Used Keras API for rapid prototyping and TensorFlow Serving for model deployment.'},'SQL':{usage:'Database Management&Queries',role:'Data Storage&Retrieval',description:'Designed and optimized database schemas, wrote complex queries for data extraction, and implemented data validation and integrity constraints.'},'React':{usage:'Frontend User Interface',role:'Client-Side Development',description:'Built responsive and interactive user interfaces using React components, hooks, and state management. Implemented real-time updates and dynamic content rendering.'},'Node.js':{usage:'Backend API Development',role:'Server-Side Logic',description:'Developed RESTful APIs and WebSocket connections for real-time features. Implemented authentication, data validation, and server-side business logic.'},'MongoDB':{usage:'NoSQL Database Storage',role:'Data Persistence',description:'Designed flexible document schemas and implemented efficient data storage and retrieval. Used MongoDB aggregation pipelines for complex data analysis.'},'R':{usage:'Statistical Analysis&Visualization',role:'Data Science&Analytics',description:'Performed advanced statistical analysis and created interactive visualizations. Used tidyverse packages for data manipulation and ggplot2 for plotting.'},'Shiny':{usage:'Interactive Dashboard Framework',role:'Web Application Development',description:'Built interactive web applications and dashboards using Shiny framework. Created reactive user interfaces for real-time data exploration and analysis.'}};
function initializeTechModal(){const modal=document.getElementById('techModal');
const closeBtn=modal.querySelector('.close-modal');
const techTags=document.querySelectorAll('.tech-tag');
function showModal(techName){const techData=techDetails[techName];
if(techData){const activeSlide=document.querySelector('.project-slide.active');
const projectTitle=activeSlide?activeSlide.querySelector('h4').textContent:'Project';
let description=techData.description;
if(techName==='Python'){if(projectTitle==='Multi-Sensor Point Cloud Reconstruction'){description='Used Python for multi-sensor data processing and point cloud reconstruction. Implemented data fusion algorithms, Open3D integration, and CARLA simulation pipeline for 3D reconstruction from RGB, depth, and LiDAR streams.';
}else if(projectTitle==='Rubik\'s Cube State Detector'){description='Applied Python for computer vision and image processing tasks. Implemented ORB feature matching, DBSCAN clustering, HSV color segmentation, and 3D model reconstruction using OpenCV and PyGame for Rubik\'s Cube state detection.';
}else if(projectTitle==='Chess Discord Bot'){description='Utilized Python for Discord bot development and API integration. Implemented real-time data fetching from Lichess API, player rating processing, and challenge functionality using Discord.py framework.';
}else if(projectTitle==='Routing Protocol Simulator'){description='Applied Python for network programming and distributed systems. Implemented TCP socket communication, threading for concurrent operations, and routing algorithms (DVR/LSR) with Bellman-Ford and Dijkstra pathfinding.';
}}document.getElementById('modalTechName').textContent=techName;
document.getElementById('modalProjectTitle').textContent=projectTitle;
document.getElementById('modalTechDescription').textContent=description;
modal.style.display='block';
}}function hideModal(){modal.style.display='none';
}techTags.forEach(tag=>{tag.addEventListener('click',()=>{const techName=tag.getAttribute('data-tech');
if(window.pauseCarousel){window.pauseCarousel();
}showModal(techName);
});
});
closeBtn.addEventListener('click',()=>{hideModal();
if(window.restartCarousel){window.restartCarousel();
}});
modal.addEventListener('click',(e)=>{if(e.target===modal){hideModal();
if(window.restartCarousel){window.restartCarousel();
}}});
document.addEventListener('keydown',(e)=>{if(e.key==='Escape'&&modal.style.display==='block'){hideModal();
if(window.restartCarousel){window.restartCarousel();
}}});
}function initializeProjectsCarousel(){const carouselTrack=document.querySelector('.carousel-track');
const slides=document.querySelectorAll('.project-slide');
const dots=document.querySelectorAll('.dot');
const prevBtn=document.getElementById('carouselPrev');
const nextBtn=document.getElementById('carouselNext');
let currentSlide=0;
const totalSlides=slides.length;
function showSlide(index){slides.forEach(slide=>slide.classList.remove('active'));
dots.forEach(dot=>dot.classList.remove('active'));
slides[index].classList.add('active');
dots[index].classList.add('active');
carouselTrack.style.transform=`translateX(-${index*100}%)`;
}function nextSlide(){currentSlide=(currentSlide+1)%totalSlides;
showSlide(currentSlide);
}function prevSlide(){currentSlide=(currentSlide-1+totalSlides)%totalSlides;
showSlide(currentSlide);
}nextBtn.addEventListener('click',()=>{nextSlide();
if(window.restartCarousel){window.restartCarousel();
}});
prevBtn.addEventListener('click',()=>{prevSlide();
if(window.restartCarousel){window.restartCarousel();
}});
dots.forEach((dot,index)=>{dot.addEventListener('click',()=>{currentSlide=index;
showSlide(currentSlide);
if(window.restartCarousel){window.restartCarousel();
}});
});
let carouselInterval=setInterval(nextSlide,10000);
function pauseCarousel(){if(carouselInterval){clearInterval(carouselInterval);
carouselInterval=null;
}}function restartCarousel(){pauseCarousel();
carouselInterval=setInterval(nextSlide,10000);
}window.pauseCarousel=pauseCarousel;
window.restartCarousel=restartCarousel;
}function initializeNavbarScroll(){const navbar=document.querySelector('.navbar');
let lastScrollTop=0;
let ticking=false;
function updateNavbar(){const scrollTop=window.pageYOffset||document.documentElement.scrollTop;
if(scrollTop>lastScrollTop&&scrollTop>100){navbar.style.transform='translateY(-100%)';
}else{navbar.style.transform='translateY(0)';
}lastScrollTop=scrollTop;
ticking=false;
}function requestTick(){if(!ticking){requestAnimationFrame(updateNavbar);
ticking=true;
}}window.addEventListener('scroll',requestTick);
}function downloadResume(){const link=document.createElement('a');
link.href='data/LiamNicholson_Resume.pdf';
link.download='LiamNicholson_Resume.pdf';
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}document.addEventListener('DOMContentLoaded',()=>{const timeline=new CircularTimeline();
animateSkillsChart();
initializeSkillModal();
initializeTechModal();
initializeProjectsCarousel();
initializeNavbarScroll();
});
